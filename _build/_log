### Starting build.
# Target: genqbf.ml.depends, tags: { package(str), package(unix), extension:ml, file:genqbf.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules genqbf.ml > genqbf.ml.depends
# Target: ExprLexer.mll, tags: { package(str), package(unix), extension:mll, file:ExprLexer.mll, lexer, ocaml, ocamllex, quiet }
/home/zyming/.opam/default/bin/ocamllex.opt -q ExprLexer.mll # cached
# Target: ExprLexer.ml.depends, tags: { package(str), package(unix), extension:ml, file:ExprLexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules ExprLexer.ml > ExprLexer.ml.depends # cached
# Target: ExprParser.mly.depends, tags: { package(str), package(unix), extension:mly, file:ExprParser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --explain --raw-depend --ocamldep 'ocamlfind ocamldep -modules' ExprParser.mly > ExprParser.mly.depends # cached
# Target: Expression.ml.depends, tags: { package(str), package(unix), extension:ml, file:Expression.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules Expression.ml > Expression.ml.depends # cached
# Target: Expression.cmo, tags: { package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:Expression.cmo, file:Expression.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package str -package unix -o Expression.cmo Expression.ml # cached
# Target: global.ml.depends, tags: { package(str), package(unix), extension:ml, file:global.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules global.ml > global.ml.depends # cached
# Target: global.cmo, tags: { package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:global.cmo, file:global.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package str -package unix -o global.cmo global.ml # cached
# Target: ExprParser.mly, tags: { package(str), package(unix), byte, compile, extension:ml, extension:mly, file:ExprParser.ml, file:ExprParser.mly, infer, menhir, ocaml, parser, quiet }
menhir --explain --ocamlc 'ocamlfind ocamlc -package str -package unix' --infer ExprParser.mly # cached
# Target: ExprParser.mli.depends, tags: { package(str), package(unix), extension:mli, file:ExprParser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules ExprParser.mli > ExprParser.mli.depends # cached
# Target: ExprParser.cmi, tags: { package(str), package(unix), byte, compile, extension:mli, file:ExprParser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package str -package unix -o ExprParser.cmi ExprParser.mli # cached
# Target: ExprLexer.cmo, tags: { package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:ExprLexer.cmo, file:ExprLexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package str -package unix -o ExprLexer.cmo ExprLexer.ml # cached
# Target: formula.ml.depends, tags: { package(str), package(unix), extension:ml, file:formula.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules formula.ml > formula.ml.depends # cached
# Target: formula.cmo, tags: { package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:formula.cmo, file:formula.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package str -package unix -o formula.cmo formula.ml # cached
# Target: genArgs.ml.depends, tags: { package(str), package(unix), extension:ml, file:genArgs.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules genArgs.ml > genArgs.ml.depends # cached
# Target: genArgs.cmo, tags: { package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:genArgs.cmo, file:genArgs.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package str -package unix -o genArgs.cmo genArgs.ml # cached
# Target: lexer.mll, tags: { package(str), package(unix), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/home/zyming/.opam/default/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(str), package(unix), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { package(str), package(unix), extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --explain --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { package(str), package(unix), byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet }
menhir --explain --ocamlc 'ocamlfind ocamlc -package str -package unix' --infer parser.mly # cached
# Target: parser.mli.depends, tags: { package(str), package(unix), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(str), package(unix), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package str -package unix -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package str -package unix -o lexer.cmo lexer.ml # cached
# Target: Parse.ml.depends, tags: { package(str), package(unix), extension:ml, file:Parse.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules Parse.ml > Parse.ml.depends # cached
# Target: Parse.cmo, tags: { package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:Parse.cmo, file:Parse.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package str -package unix -o Parse.cmo Parse.ml # cached
# Target: genqbf.cmo, tags: { package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:genqbf.cmo, file:genqbf.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package str -package unix -o genqbf.cmo genqbf.ml
+ ocamlfind ocamlc -c -package str -package unix -o genqbf.cmo genqbf.ml
File "genqbf.ml", line 169, characters 8-12:
169 |     let desc = parse_problem_desc () in
              ^^^^
Warning 26 [unused-var]: unused variable desc.
# Target: ExprParser.ml.depends, tags: { package(str), package(unix), extension:ml, file:ExprParser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules ExprParser.ml > ExprParser.ml.depends # cached
# Target: Expression.cmx, tags: { package(str), package(unix), compile, extension:cmx, extension:ml, file:Expression.cmx, file:Expression.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package str -package unix -o Expression.cmx Expression.ml # cached
# Target: global.cmx, tags: { package(str), package(unix), compile, extension:cmx, extension:ml, file:global.cmx, file:global.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package str -package unix -o global.cmx global.ml # cached
# Target: ExprParser.cmx, tags: { package(str), package(unix), compile, extension:cmx, extension:ml, file:ExprParser.cmx, file:ExprParser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package str -package unix -o ExprParser.cmx ExprParser.ml # cached
# Target: ExprLexer.cmx, tags: { package(str), package(unix), compile, extension:cmx, extension:ml, file:ExprLexer.cmx, file:ExprLexer.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package str -package unix -o ExprLexer.cmx ExprLexer.ml # cached
# Target: formula.cmx, tags: { package(str), package(unix), compile, extension:cmx, extension:ml, file:formula.cmx, file:formula.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package str -package unix -o formula.cmx formula.ml # cached
# Target: genArgs.cmx, tags: { package(str), package(unix), compile, extension:cmx, extension:ml, file:genArgs.cmx, file:genArgs.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package str -package unix -o genArgs.cmx genArgs.ml # cached
# Target: parser.ml.depends, tags: { package(str), package(unix), extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -package unix -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmx, tags: { package(str), package(unix), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package str -package unix -o parser.cmx parser.ml # cached
# Target: lexer.cmx, tags: { package(str), package(unix), compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package str -package unix -o lexer.cmx lexer.ml # cached
# Target: Parse.cmx, tags: { package(str), package(unix), compile, extension:cmx, extension:ml, file:Parse.cmx, file:Parse.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package str -package unix -o Parse.cmx Parse.ml # cached
# Target: genqbf.cmx, tags: { package(str), package(unix), compile, extension:cmx, extension:ml, file:genqbf.cmx, file:genqbf.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package str -package unix -o genqbf.cmx genqbf.ml
+ ocamlfind ocamlopt -c -package str -package unix -o genqbf.cmx genqbf.ml
File "genqbf.ml", line 169, characters 8-12:
169 |     let desc = parse_problem_desc () in
              ^^^^
Warning 26 [unused-var]: unused variable desc.
# Target: genqbf.native, tags: { package(str), package(unix), dont_link_with, extension:native, file:genqbf.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg -package str -package unix Expression.cmx global.cmx ExprParser.cmx ExprLexer.cmx Parse.cmx formula.cmx genArgs.cmx parser.cmx lexer.cmx genqbf.cmx -o genqbf.native
# Compilation successful.
